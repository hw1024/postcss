'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash.get');

var _lodash2 = _interopRequireDefault(_lodash);

var _posthtmlAttrsParser = require('posthtml-attrs-parser');

var _posthtmlAttrsParser2 = _interopRequireDefault(_posthtmlAttrsParser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cssModulesCache = {};

exports.default = function (cssModulesPath) {
    return function cssModules(tree) {
        // If the plugin is used in gulp watch or another similar tool, files with CSS modules
        // might change between runs. Therefore we purge the cache before each run.
        cssModulesCache = {};
        tree.match({ attrs: { 'css-module': /\w+/ } }, function (node) {
            var attrs = (0, _posthtmlAttrsParser2.default)(node.attrs);
            var cssModuleName = attrs['css-module'];
            delete attrs['css-module'];

            attrs.class = attrs.class || [];
            attrs.class.push(getCssClassName(cssModulesPath, cssModuleName));
            node.attrs = attrs.compose();

            return node;
        });
    };
};

function getCssClassName(cssModulesPath, cssModuleName) {
    if (typeof cssModulesPath === 'string') {
        return getCssClassNameFromPath(cssModulesPath, cssModuleName);
    } else {
        return getCssClassNameFromObject(cssModulesPath, cssModuleName);
    }
}

function getCssClassNameFromPath(cssModulesPath, cssModuleName) {
    if (_fs2.default.lstatSync(cssModulesPath).isDirectory()) {
        var cssModulesDir = cssModulesPath;
        var cssModuleNameParts = cssModuleName.split('.');
        var cssModulesFile = cssModuleNameParts.shift();
        cssModuleName = cssModuleNameParts.join('.');
        cssModulesPath = _path2.default.join(cssModulesDir, cssModulesFile);
    }

    var cssModules = getCssModules(_path2.default.resolve(cssModulesPath));

    return getCssClassNameFromObject(cssModules, cssModuleName);
}

function getCssClassNameFromObject(cssModules, cssModuleName) {
    return cssModuleName.trim().split(' ').map(function (cssModuleName) {
        var cssClassName = (0, _lodash2.default)(cssModules, cssModuleName);
        if (!cssClassName) {
            throw getError('CSS module "' + cssModuleName + '" is not found');
        } else if (typeof cssClassName !== 'string') {
            throw getError('CSS module "' + cssModuleName + '" is not a string');
        }
        return cssClassName;
    }).join(' ');
}

function getCssModules(cssModulesPath) {
    var fullPath = require.resolve(cssModulesPath);
    if (!cssModulesCache[fullPath]) {
        delete require.cache[fullPath];
        cssModulesCache[fullPath] = require(fullPath);
    }

    return cssModulesCache[fullPath];
}

function getError(message) {
    var fullMessage = '[posthtml-css-modules] ' + message;
    return new Error(fullMessage);
}